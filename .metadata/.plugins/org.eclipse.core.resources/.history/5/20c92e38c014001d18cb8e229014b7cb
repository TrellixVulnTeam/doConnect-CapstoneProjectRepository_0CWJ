package com.doconnect.qanda.serviceImpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.ExampleMatcher.GenericPropertyMatchers;
import org.springframework.stereotype.Service;

import com.doconnect.qanda.entity.Answer;
import com.doconnect.qanda.entity.Question;
import com.doconnect.qanda.entity.User;
import com.doconnect.qanda.exceptions.QuestionNotFoundException;
import com.doconnect.qanda.repository.QuestionRepository;

@Service
public class QuestionServiceImpl {

	@Autowired
	private QuestionRepository questionRepository;
	
	@Autowired
	private AnswerServiceImpl answerService;
	
	
	public Question addQuestion(Question question) {
		return questionRepository.save(question);
	}
	
	public List<Question> getQuestionList(){
		return questionRepository.findAll();
	}
	
	public Question findQuestionById(Long questionId) {
		Question question = new Question();
		try {
			Optional<Question> question_ = Optional.of(questionRepository.findById(questionId).orElseThrow(()-> new QuestionNotFoundException("Question Not Found!")));
			question = question_.get();
		} catch (QuestionNotFoundException e) {
			System.out.println(e.getMessage());
			return null;
		}
		return question;
	}
	
	public List<Question> getQuestionsWithTheseWords(String words){
		Question questionWithTheseWords = new Question();
		questionWithTheseWords.setQuestion(words);
		
		ExampleMatcher exampleMatcher = ExampleMatcher.matching().withMatcher("question", GenericPropertyMatchers.contains()).withIgnoreCase().withIgnorePaths("questionId");
		
		Example<Question> example = Example.of(questionWithTheseWords,exampleMatcher);
		
		return questionRepository.findAll(example);
	}
	
	public Question updateQuestion(Long questionId,Question questionToBeUpdated) {
		Question question =  findQuestionById(questionId);
		question = questionToBeUpdated;
		return questionRepository.save(question);
	}
	
	public String deleteQuestionById(Long id) {
		Question question = findQuestionById(id);
		questionRepository.deleteById(question.getQuestionId());
		return "Question "+question.getQuestion()+" Deleted";
	}
	
	
	
}
